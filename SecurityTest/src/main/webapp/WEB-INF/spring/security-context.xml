<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- 6. 사용자 정의 접근 거부 처리자 빈 추가 -->
	<!-- 
		CustomAccessDeniedHandler : 없는 로그인 정보라면 exception으로 이 핸들러와 다르다. 
		이 핸들러가 발동되는 경우는 저장되어있는 로그인 정보 중 이 권한이 아닌 것이 로그인되었을 때 발동 
	-->
	<bean id="customAccessDenied" class="kr.or.ddit.security.CustomAccessDeniedHandler"></bean>
	<bean id="customLoginSuccess" class="kr.or.ddit.security.customLoginSuccessHandler"></bean>
	<!-- <bean id="customPasswordEncoder" class="kr.or.ddit.security.CustomNoOpPasswordEncoder"></bean> -->
	<bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>
	<bean id="customUserDetailsService" class="kr.or.ddit.security.CustomUserDetailsService"></bean>
	
	<security:http>
		<!-- 3. 접근 제한 설정 : URL 패턴으로 접근 제한을 설정 -->
		<!-- <security:intercept-url pattern="/board/list" access="permitAll" />
		<security:intercept-url pattern="/board/register" access="hasRole('ROLE_MEMBER')" />
		<security:intercept-url pattern="/notice/list" access="permitAll" />
		<security:intercept-url pattern="/notice/register" access="hasRole('ROLE_ADMIN')" /> -->
		<!-- 3. 접근 제한 설정 끝 -->

		<!-- 
			폼 기반 인증 기능을 사용 : 사용자 정의 로그인 페이지 추가 (login-page)
			로그인 성공 처리 추가 : 로그인 성공 후 처리를 담당하는 처리자로 지정 (customLoginSuccess)
		 -->
		<security:form-login login-page="/login" authentication-success-handler-ref="customLoginSuccess"/>

		<!-- 5. 접근 거부 처리자 : 접근 거부 처리자의 URI를 지정 -->
		<!-- <security:access-denied-handler error-page="/accessError"/> -->
		<!-- 6. 사용자 정의 접근 거부 처리자 추가 : customAccessDenied를 접근 거부 처리자로 등록 -->
		<security:access-denied-handler ref="customAccessDenied"/>
		
		<!-- 
			14. 자동 로그인 적용
			- 데이터 소스를 지정하고 테이블을 이용해서 기존 로그인 정보를 기록
			- 쿠키의 유효시간을 지정한다. (604800 : 7일)
		 -->
		<security:remember-me data-source-ref="dataSource" token-validity-seconds="604800"/>
		
		<!-- 9. 로그아웃 처리 : 로그아웃 처리를 위한 URI를 지정하고 로그아웃한 후에 세션을 무효화한다. -->
		<security:logout logout-url="/logout" invalidate-session="true" 
			delete-cookies="remember-me, JSESSION_ID"/>
	</security:http>

	<security:authentication-manager>
		<security:authentication-provider user-service-ref="customUserDetailsService">
			<!-- <security:user-service>
				<security:user name="member" password="{noop}1234" authorities="ROLE_MEMBER" />
				<security:user name="admin" password="{noop}1234" authorities="ROLE_ADMIN" />
			</security:user-service> -->
			
			<!-- 사용자 정의 테이블을 이용한 인증/인가 처리 -->
			<!-- <security:jdbc-user-service data-source-ref="dataSource"/>
			<security:password-encoder ref="customPasswordEncoder"/> -->
			<!-- 사용자 정의 테이블을 이용한 인증/인가 처리 끝 -->
			
			<!-- 
				UserDetailsService를 설정하면서 데이터베이스 연동 후 
				사용자가 정의한 테이블로 mapper를 통한 데이터 바인딩으로 인증/인가 진행 시 주석
			-->
			<!-- <security:jdbc-user-service data-source-ref="dataSource" 
			users-by-username-query="select user_id, user_pw, enabled from member where user_id = ?"
			authorities-by-username-query="select m.user_id, m.auth from member m, member_auth ma where ma.user_no = m.user_no and m.user_id = ?" /> -->
			<security:password-encoder ref="bcryptPasswordEncoder"/>
			
		</security:authentication-provider>
	</security:authentication-manager>

</beans>